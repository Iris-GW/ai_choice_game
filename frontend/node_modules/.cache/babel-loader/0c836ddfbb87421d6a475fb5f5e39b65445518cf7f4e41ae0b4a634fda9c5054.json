{"ast":null,"code":"var _jsxFileName = \"/Users/guanhuawu/Documents/ai_choice_game/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; // Import the CSS file\n\n// API base URL - change this to your backend server URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5001';\nfunction App() {\n  _s();\n  const [story, setStory] = useState(\"\");\n  const [choices, setChoices] = useState([]);\n  const [statusMessage, setStatusMessage] = useState(\"Waiting for the story to load...\"); // Initial status message\n  const [sessionId, setSessionId] = useState(null); // Store session ID\n\n  // Fetch the initial story when the component mounts\n  useEffect(() => {\n    console.log(\"Fetching initial story...\"); // Log when fetching starts\n    fetch(`${API_BASE_URL}/start`).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Story received:\", data); // Log the received data\n      if (data.story) {\n        setStory(data.story);\n        setChoices(data.choices || []); // Update choices based on the response\n        setStatusMessage(\"\"); // Clear any previous error messages\n\n        // Store the session ID\n        if (data.session_id) {\n          setSessionId(data.session_id);\n        }\n      } else {\n        setStatusMessage(\"Failed to generate the initial story.\"); // Handle error\n      }\n    }).catch(error => {\n      console.error(\"Failed to fetch the initial story:\", error); // Log the network error\n      setStatusMessage(`Failed to fetch the initial story: ${error.message}`); // Network error handling\n    });\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  // Function to handle player choice and fetch the next story\n  const handleChoice = choice => {\n    if (!sessionId) {\n      setStatusMessage(\"Session ID is missing. Please restart the game.\");\n      return;\n    }\n    console.log(`Choice made: ${choice}, Session ID: ${sessionId}`); // Log the choice made\n    setStatusMessage(\"Generating the next part of the story...\"); // Show status message while waiting for AI response\n\n    fetch(`${API_BASE_URL}/choice`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        choice,\n        session_id: sessionId\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Next story received:\", data); // Log the next part of the story received\n      if (data.story) {\n        setStory(data.story); // Update story with new content\n        setChoices(data.choices || []); // Update choices with the new choices from the response\n        setStatusMessage(\"\"); // Clear any error or loading message\n      } else {\n        setStatusMessage(\"Failed to generate the next part of the story.\"); // Handle error\n      }\n    }).catch(error => {\n      console.error(\"Error processing your choice:\", error); // Log the network error\n      setStatusMessage(`Error processing your choice: ${error.message}`); // Network error handling\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"character-name\",\n      children: \"Game Story\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dialogue-box\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: story\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"choice-box\",\n      children: choices.map((choice, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleChoice(index + 1),\n        className: \"choice-button\",\n        children: choice\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-box\",\n      children: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"Ilfx0Qz5nRyKFGrKunz/iukz7yA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","story","setStory","choices","setChoices","statusMessage","setStatusMessage","sessionId","setSessionId","console","log","fetch","then","response","ok","Error","status","json","data","session_id","catch","error","message","handleChoice","choice","method","headers","body","JSON","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/guanhuawu/Documents/ai_choice_game/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css'; // Import the CSS file\n\n// API base URL - change this to your backend server URL\nconst API_BASE_URL = 'http://localhost:5001';\n\nfunction App() {\n    const [story, setStory] = useState(\"\");\n    const [choices, setChoices] = useState([]);\n    const [statusMessage, setStatusMessage] = useState(\"Waiting for the story to load...\"); // Initial status message\n    const [sessionId, setSessionId] = useState(null); // Store session ID\n\n    // Fetch the initial story when the component mounts\n    useEffect(() => {\n        console.log(\"Fetching initial story...\");  // Log when fetching starts\n        fetch(`${API_BASE_URL}/start`)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                console.log(\"Story received:\", data);  // Log the received data\n                if (data.story) {\n                    setStory(data.story);\n                    setChoices(data.choices || []); // Update choices based on the response\n                    setStatusMessage(\"\"); // Clear any previous error messages\n                    \n                    // Store the session ID\n                    if (data.session_id) {\n                        setSessionId(data.session_id);\n                    }\n                } else {\n                    setStatusMessage(\"Failed to generate the initial story.\"); // Handle error\n                }\n            })\n            .catch((error) => {\n                console.error(\"Failed to fetch the initial story:\", error); // Log the network error\n                setStatusMessage(`Failed to fetch the initial story: ${error.message}`); // Network error handling\n            });\n    }, []); // Empty dependency array ensures this runs only once on mount\n\n    // Function to handle player choice and fetch the next story\n    const handleChoice = (choice) => {\n        if (!sessionId) {\n            setStatusMessage(\"Session ID is missing. Please restart the game.\");\n            return;\n        }\n\n        console.log(`Choice made: ${choice}, Session ID: ${sessionId}`);  // Log the choice made\n        setStatusMessage(\"Generating the next part of the story...\"); // Show status message while waiting for AI response\n        \n        fetch(`${API_BASE_URL}/choice`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                choice, \n                session_id: sessionId \n            })\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => {\n            console.log(\"Next story received:\", data);  // Log the next part of the story received\n            if (data.story) {\n                setStory(data.story);  // Update story with new content\n                setChoices(data.choices || []); // Update choices with the new choices from the response\n                setStatusMessage(\"\");  // Clear any error or loading message\n            } else {\n                setStatusMessage(\"Failed to generate the next part of the story.\"); // Handle error\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error processing your choice:\", error); // Log the network error\n            setStatusMessage(`Error processing your choice: ${error.message}`); // Network error handling\n        });\n    };\n\n    return (\n        <div className=\"App\">\n            <h2 className=\"character-name\">Game Story</h2>\n\n            {/* Dialogue box for displaying the story */}\n            <div className=\"dialogue-box\">\n                <p>{story}</p>\n            </div>\n\n            {/* Choice buttons - dynamically rendered */}\n            <div className=\"choice-box\">\n                {choices.map((choice, index) => (\n                    <button \n                        key={index} \n                        onClick={() => handleChoice(index + 1)}\n                        className=\"choice-button\"\n                    >\n                        {choice}\n                    </button>\n                ))}\n            </div>\n\n            {/* Status message for showing any error or loading messages */}\n            {statusMessage && <div className=\"status-box\">{statusMessage}</div>}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}