{"ast":null,"code":"var _jsxFileName = \"/Users/guanhuawu/Documents/ai_choice_game/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// API base URL - change this to your backend server URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5001';\nfunction App() {\n  _s();\n  const [story, setStory] = useState(\"\");\n  const [choices, setChoices] = useState([]);\n  const [statusMessage, setStatusMessage] = useState(\"Waiting for the story to load...\");\n  const [sessionId, setSessionId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]); // To keep track of story progress\n  const [choicesMade, setChoicesMade] = useState([]); // To track the choices player made\n  const [chapterSummaries, setChapterSummaries] = useState([]); // AI-generated summaries\n\n  // Helper function to create summary from story\n  const createSummary = text => {\n    // If text is short enough, return it as is\n    if (text.length <= 120) return text;\n\n    // Otherwise, truncate and add ellipsis\n    return text.substring(0, 117) + '...';\n  };\n\n  // Function to get AI-generated summary for a chapter with player's choice\n  const getAISummary = async (storyText, playerChoice) => {\n    try {\n      // Create request body with story and choice\n      const requestBody = {\n        story: storyText,\n        choice: playerChoice\n      };\n      const response = await fetch(`${API_BASE_URL}/summarize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get AI summary');\n      }\n      const data = await response.json();\n      return data.summary || `You chose \"${playerChoice}\" and continued your journey...`;\n    } catch (error) {\n      console.error(\"Error getting AI summary:\", error);\n      return `You chose \"${playerChoice}\" and continued your journey...`;\n    }\n  };\n\n  // Fetch the initial story when the component mounts\n  useEffect(() => {\n    setLoading(true);\n    console.log(\"Fetching initial story...\");\n    fetch(`${API_BASE_URL}/start`).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Story received:\", data);\n      if (data.story) {\n        setStory(data.story);\n        setChoices(data.choices || []);\n        setStatusMessage(\"\");\n        if (data.session_id) {\n          setSessionId(data.session_id);\n        }\n\n        // Add to game history\n        setGameHistory([{\n          story: data.story,\n          choices: data.choices\n        }]);\n\n        // No summary for first chapter until a choice is made\n      } else {\n        setStatusMessage(\"Failed to generate the initial story.\");\n      }\n    }).catch(error => {\n      console.error(\"Failed to fetch the initial story:\", error);\n      setStatusMessage(`Failed to fetch the initial story: ${error.message}`);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, []);\n\n  // Function to handle player choice and fetch the next story\n  const handleChoice = (choice, choiceText) => {\n    if (!sessionId) {\n      setStatusMessage(\"Session ID is missing. Please restart the game.\");\n      return;\n    }\n    setLoading(true);\n    console.log(`Choice made: ${choice}, Session ID: ${sessionId}`);\n    setStatusMessage(\"Generating the next part of the story...\");\n\n    // Add this choice to the choicesMade array\n    setChoicesMade(prev => [...prev, choiceText]);\n\n    // Get current chapter information for summary creation\n    const currentChapterIndex = gameHistory.length - 1;\n    const currentChapterStory = gameHistory[currentChapterIndex].story;\n    fetch(`${API_BASE_URL}/choice`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        choice,\n        session_id: sessionId\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(async data => {\n      console.log(\"Next story received:\", data);\n      if (data.story) {\n        // Update current story and choices\n        setStory(data.story);\n        setChoices(data.choices || []);\n        setStatusMessage(\"\");\n\n        // IMPORTANT: Now generate a summary for the PREVIOUS chapter + choice\n        const summary = await getAISummary(currentChapterStory, choiceText);\n\n        // Add summary for the chapter we just completed\n        setChapterSummaries(prev => [...prev, summary]);\n\n        // Add new chapter to game history\n        setGameHistory(prev => [...prev, {\n          story: data.story,\n          choices: data.choices\n        }]);\n      } else if (data.error) {\n        setStatusMessage(`Error: ${data.error}`);\n      } else {\n        setStatusMessage(\"Failed to generate the next part of the story.\");\n      }\n    }).catch(error => {\n      console.error(\"Error processing your choice:\", error);\n      setStatusMessage(`Error processing your choice: ${error.message}`);\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  // Function to restart the game\n  const restartGame = () => {\n    setStory(\"\");\n    setChoices([]);\n    setSessionId(null);\n    setGameHistory([]);\n    setChoicesMade([]);\n    setChapterSummaries([]);\n    setStatusMessage(\"Starting a new game...\");\n\n    // Trigger the initial story fetch again\n    setLoading(true);\n    fetch(`${API_BASE_URL}/start`).then(response => response.json()).then(data => {\n      if (data.story) {\n        setStory(data.story);\n        setChoices(data.choices || []);\n        setStatusMessage(\"\");\n        if (data.session_id) {\n          setSessionId(data.session_id);\n        }\n\n        // Add to game history - no summary yet for chapter 1\n        setGameHistory([{\n          story: data.story,\n          choices: data.choices\n        }]);\n      }\n    }).catch(error => {\n      setStatusMessage(`Failed to restart: ${error.message}`);\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Journey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), gameHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"journey-entry\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chapter\",\n          children: [\"Chapter \", index + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this), index < chapterSummaries.length && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chapter-summary\",\n          children: [\"\\\"\", chapterSummaries[index], \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 29\n        }, this), index === gameHistory.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-chapter-indicator\",\n          children: \"You are here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"AI Choice Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dialogue-box\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading your adventure...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 25\n        }, this) : story ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: story\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Waiting for your story to begin...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"choice-box\",\n        children: !loading && choices.length > 0 ? choices.map((choice, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleChoice(index + 1, choice),\n          className: \"choice-button\",\n          disabled: loading,\n          children: choice\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 29\n        }, this)) : loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading choices...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restartGame,\n          className: \"choice-button\",\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-box\",\n        children: statusMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"QGTS5C4uHnUBysEg1mJX7O5OeBk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","story","setStory","choices","setChoices","statusMessage","setStatusMessage","sessionId","setSessionId","loading","setLoading","gameHistory","setGameHistory","choicesMade","setChoicesMade","chapterSummaries","setChapterSummaries","createSummary","text","length","substring","getAISummary","storyText","playerChoice","requestBody","choice","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","summary","error","console","log","then","status","session_id","catch","message","finally","handleChoice","choiceText","prev","currentChapterIndex","currentChapterStory","restartGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","entry","index","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/guanhuawu/Documents/ai_choice_game/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// API base URL - change this to your backend server URL\nconst API_BASE_URL = 'http://localhost:5001';\n\nfunction App() {\n    const [story, setStory] = useState(\"\");\n    const [choices, setChoices] = useState([]);\n    const [statusMessage, setStatusMessage] = useState(\"Waiting for the story to load...\"); \n    const [sessionId, setSessionId] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [gameHistory, setGameHistory] = useState([]); // To keep track of story progress\n    const [choicesMade, setChoicesMade] = useState([]); // To track the choices player made\n    const [chapterSummaries, setChapterSummaries] = useState([]); // AI-generated summaries\n\n    // Helper function to create summary from story\n    const createSummary = (text) => {\n        // If text is short enough, return it as is\n        if (text.length <= 120) return text;\n        \n        // Otherwise, truncate and add ellipsis\n        return text.substring(0, 117) + '...';\n    };\n\n    // Function to get AI-generated summary for a chapter with player's choice\n    const getAISummary = async (storyText, playerChoice) => {\n        try {\n            // Create request body with story and choice\n            const requestBody = { \n                story: storyText,\n                choice: playerChoice\n            };\n            \n            const response = await fetch(`${API_BASE_URL}/summarize`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(requestBody)\n            });\n            \n            if (!response.ok) {\n                throw new Error('Failed to get AI summary');\n            }\n            \n            const data = await response.json();\n            return data.summary || `You chose \"${playerChoice}\" and continued your journey...`;\n        } catch (error) {\n            console.error(\"Error getting AI summary:\", error);\n            return `You chose \"${playerChoice}\" and continued your journey...`;\n        }\n    };\n\n    // Fetch the initial story when the component mounts\n    useEffect(() => {\n        setLoading(true);\n        console.log(\"Fetching initial story...\");\n        \n        fetch(`${API_BASE_URL}/start`)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                console.log(\"Story received:\", data);\n                \n                if (data.story) {\n                    setStory(data.story);\n                    setChoices(data.choices || []);\n                    setStatusMessage(\"\");\n                    \n                    if (data.session_id) {\n                        setSessionId(data.session_id);\n                    }\n                    \n                    // Add to game history\n                    setGameHistory([{\n                        story: data.story,\n                        choices: data.choices\n                    }]);\n                    \n                    // No summary for first chapter until a choice is made\n                } else {\n                    setStatusMessage(\"Failed to generate the initial story.\");\n                }\n            })\n            .catch((error) => {\n                console.error(\"Failed to fetch the initial story:\", error);\n                setStatusMessage(`Failed to fetch the initial story: ${error.message}`);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, []);\n\n    // Function to handle player choice and fetch the next story\n    const handleChoice = (choice, choiceText) => {\n        if (!sessionId) {\n            setStatusMessage(\"Session ID is missing. Please restart the game.\");\n            return;\n        }\n\n        setLoading(true);\n        console.log(`Choice made: ${choice}, Session ID: ${sessionId}`);\n        setStatusMessage(\"Generating the next part of the story...\");\n        \n        // Add this choice to the choicesMade array\n        setChoicesMade(prev => [...prev, choiceText]);\n        \n        // Get current chapter information for summary creation\n        const currentChapterIndex = gameHistory.length - 1;\n        const currentChapterStory = gameHistory[currentChapterIndex].story;\n        \n        fetch(`${API_BASE_URL}/choice`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                choice, \n                session_id: sessionId \n            })\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(async data => {\n            console.log(\"Next story received:\", data);\n            \n            if (data.story) {\n                // Update current story and choices\n                setStory(data.story);\n                setChoices(data.choices || []);\n                setStatusMessage(\"\");\n                \n                // IMPORTANT: Now generate a summary for the PREVIOUS chapter + choice\n                const summary = await getAISummary(currentChapterStory, choiceText);\n                \n                // Add summary for the chapter we just completed\n                setChapterSummaries(prev => [...prev, summary]);\n                \n                // Add new chapter to game history\n                setGameHistory(prev => [...prev, {\n                    story: data.story,\n                    choices: data.choices\n                }]);\n            } else if (data.error) {\n                setStatusMessage(`Error: ${data.error}`);\n            } else {\n                setStatusMessage(\"Failed to generate the next part of the story.\");\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error processing your choice:\", error);\n            setStatusMessage(`Error processing your choice: ${error.message}`);\n        })\n        .finally(() => {\n            setLoading(false);\n        });\n    };\n\n    // Function to restart the game\n    const restartGame = () => {\n        setStory(\"\");\n        setChoices([]);\n        setSessionId(null);\n        setGameHistory([]);\n        setChoicesMade([]);\n        setChapterSummaries([]);\n        setStatusMessage(\"Starting a new game...\");\n        \n        // Trigger the initial story fetch again\n        setLoading(true);\n        fetch(`${API_BASE_URL}/start`)\n            .then(response => response.json())\n            .then(data => {\n                if (data.story) {\n                    setStory(data.story);\n                    setChoices(data.choices || []);\n                    setStatusMessage(\"\");\n                    \n                    if (data.session_id) {\n                        setSessionId(data.session_id);\n                    }\n                    \n                    // Add to game history - no summary yet for chapter 1\n                    setGameHistory([{\n                        story: data.story,\n                        choices: data.choices\n                    }]);\n                }\n            })\n            .catch(error => {\n                setStatusMessage(`Failed to restart: ${error.message}`);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    };\n\n    return (\n        <div className=\"App\">\n            {/* Story Journey Sidebar */}\n            <div className=\"sidebar\">\n                <h2>Your Journey</h2>\n                {gameHistory.map((entry, index) => (\n                    <div key={index} className=\"journey-entry\">\n                        <div className=\"chapter\">Chapter {index + 1}</div>\n                        \n                        {/* For completed chapters, show their summary */}\n                        {index < chapterSummaries.length && (\n                            <div className=\"chapter-summary\">\n                                \"{chapterSummaries[index]}\"\n                            </div>\n                        )}\n                        \n                        {/* For current chapter, just show the chapter heading */}\n                        {index === gameHistory.length - 1 && (\n                            <div className=\"current-chapter-indicator\">\n                                You are here\n                            </div>\n                        )}\n                    </div>\n                ))}\n            </div>\n            \n            {/* Main Game Content */}\n            <div className=\"main-content\">\n                <h1>AI Choice Game</h1>\n\n                {/* Dialogue box for displaying the story */}\n                <div className=\"dialogue-box\">\n                    {loading ? (\n                        <p>Loading your adventure...</p>\n                    ) : story ? (\n                        <p>{story}</p>\n                    ) : (\n                        <p>Waiting for your story to begin...</p>\n                    )}\n                </div>\n\n                {/* Choice buttons - dynamically rendered */}\n                <div className=\"choice-box\">\n                    {!loading && choices.length > 0 ? (\n                        choices.map((choice, index) => (\n                            <button \n                                key={index} \n                                onClick={() => handleChoice(index + 1, choice)}\n                                className=\"choice-button\"\n                                disabled={loading}\n                            >\n                                {choice}\n                            </button>\n                        ))\n                    ) : loading ? (\n                        <p>Loading choices...</p>\n                    ) : (\n                        <button onClick={restartGame} className=\"choice-button\">\n                            Start New Game\n                        </button>\n                    )}\n                </div>\n\n                {/* Status message */}\n                {statusMessage && <div className=\"status-box\">{statusMessage}</div>}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}