{"ast":null,"code":"var _jsxFileName = \"/Users/guanhuawu/Documents/ai_choice_game/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// API base URL - change this to your backend server URL\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5001';\nfunction App() {\n  _s();\n  const [story, setStory] = useState(\"\");\n  const [choices, setChoices] = useState([]);\n  const [statusMessage, setStatusMessage] = useState(\"Waiting for the story to load...\");\n  const [sessionId, setSessionId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]); // To keep track of story progress\n  const [choicesMade, setChoicesMade] = useState([]); // To track the choices player made\n  const [chapterSummaries, setChapterSummaries] = useState([]); // To store AI-generated summaries\n  const [moralAlignment, setMoralAlignment] = useState(\"neutral\"); // To track moral alignment\n\n  // Helper function to create summary from story\n  const createSummary = text => {\n    // If text is short enough, return it as is\n    if (text.length <= 120) return text;\n\n    // Otherwise, truncate and add ellipsis\n    return text.substring(0, 117) + '...';\n  };\n\n  // Function to get AI-generated summary of a chapter and player's choice\n  const getSummaryForChapter = async (storyText, playerChoice) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/summarize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          story: storyText,\n          choice: playerChoice\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to generate chapter summary');\n      }\n      const data = await response.json();\n      return data.summary;\n    } catch (error) {\n      console.error('Error getting chapter summary:', error);\n      return `You chose \"${playerChoice}\" and continued your journey...`;\n    }\n  };\n\n  // Fetch the initial story when the component mounts\n  useEffect(() => {\n    setLoading(true);\n    console.log(\"Fetching initial story...\");\n    fetch(`${API_BASE_URL}/start`).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Story received:\", data);\n      if (data.story) {\n        setStory(data.story);\n        setChoices(data.choices || []);\n        setStatusMessage(\"\");\n        if (data.session_id) {\n          setSessionId(data.session_id);\n        }\n\n        // Add to game history\n        setGameHistory([{\n          story: data.story,\n          choices: data.choices\n        }]);\n      } else {\n        setStatusMessage(\"Failed to generate the initial story.\");\n      }\n    }).catch(error => {\n      console.error(\"Failed to fetch the initial story:\", error);\n      setStatusMessage(`Failed to fetch the initial story: ${error.message}`);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, []);\n\n  // Function to handle player choice and fetch the next story\n  const handleChoice = (choice, choiceText) => {\n    if (!sessionId) {\n      setStatusMessage(\"Session ID is missing. Please restart the game.\");\n      return;\n    }\n    setLoading(true);\n    console.log(`Choice made: ${choice}, Session ID: ${sessionId}`);\n    setStatusMessage(\"Generating the next part of the story...\");\n\n    // Store the previous chapter content for summary generation\n    const currentChapterIndex = gameHistory.length - 1;\n    const currentChapterStory = gameHistory[currentChapterIndex].story;\n\n    // Add this choice to the choicesMade array\n    setChoicesMade(prev => [...prev, choiceText]);\n    fetch(`${API_BASE_URL}/choice`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        choice,\n        session_id: sessionId\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(async data => {\n      console.log(\"Next story received:\", data);\n      if (data.story) {\n        // First, generate summary for the PREVIOUS chapter plus the choice made\n        // This happens after we know the choice was successful\n        const summary = await getSummaryForChapter(currentChapterStory, choiceText);\n        setChapterSummaries(prev => [...prev, summary]);\n\n        // Then update current story and choices for the NEW chapter\n        setStory(data.story);\n        setChoices(data.choices || []);\n\n        // Update moral alignment if provided\n        if (data.moral_alignment) {\n          setMoralAlignment(data.moral_alignment);\n        }\n        setStatusMessage(\"\");\n\n        // Add to game history\n        setGameHistory(prev => [...prev, {\n          story: data.story,\n          choices: data.choices\n        }]);\n      } else if (data.error) {\n        setStatusMessage(`Error: ${data.error}`);\n      } else {\n        setStatusMessage(\"Failed to generate the next part of the story.\");\n      }\n    }).catch(error => {\n      console.error(\"Error processing your choice:\", error);\n      setStatusMessage(`Error processing your choice: ${error.message}`);\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  // Function to restart the game\n  const restartGame = () => {\n    setStory(\"\");\n    setChoices([]);\n    setSessionId(null);\n    setGameHistory([]);\n    setChoicesMade([]);\n    setChapterSummaries([]);\n    setMoralAlignment(\"neutral\");\n    setStatusMessage(\"Starting a new game...\");\n\n    // Trigger the initial story fetch again\n    setLoading(true);\n    fetch(`${API_BASE_URL}/start`).then(response => response.json()).then(data => {\n      if (data.story) {\n        setStory(data.story);\n        setChoices(data.choices || []);\n        setStatusMessage(\"\");\n        if (data.session_id) {\n          setSessionId(data.session_id);\n        }\n        setGameHistory([{\n          story: data.story,\n          choices: data.choices\n        }]);\n      }\n    }).catch(error => {\n      setStatusMessage(`Failed to restart: ${error.message}`);\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `moral-indicator ${moralAlignment}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Character Path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"moral-meter\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"moral-label good\",\n            children: \"Virtuous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"moral-bar\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `moral-fill ${moralAlignment}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"moral-label evil\",\n            children: \"Dark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Journey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), gameHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"journey-entry\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chapter\",\n          children: [\"Chapter \", index + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this), index < chapterSummaries.length && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chapter-summary\",\n          children: chapterSummaries[index]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 29\n        }, this), index >= chapterSummaries.length && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"story-summary\",\n            children: createSummary(entry.story)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 33\n          }, this), index < choicesMade.length && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"choice-made\",\n            children: [\"\\u2192 \", choicesMade[index]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"AI Choice Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dialogue-box\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading your adventure...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this) : story ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: story\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Waiting for your story to begin...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"choice-box\",\n        children: !loading && choices.length > 0 ? choices.map((choice, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleChoice(index + 1, choice),\n          className: \"choice-button\",\n          disabled: loading,\n          children: choice\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 29\n        }, this)) : loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading choices...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restartGame,\n          className: \"choice-button\",\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-box\",\n        children: statusMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"wHsTYpuD39fUl1VbM3tMIVTV6QU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","App","_s","story","setStory","choices","setChoices","statusMessage","setStatusMessage","sessionId","setSessionId","loading","setLoading","gameHistory","setGameHistory","choicesMade","setChoicesMade","chapterSummaries","setChapterSummaries","moralAlignment","setMoralAlignment","createSummary","text","length","substring","getSummaryForChapter","storyText","playerChoice","response","fetch","method","headers","body","JSON","stringify","choice","ok","Error","data","json","summary","error","console","log","then","status","session_id","catch","message","finally","handleChoice","choiceText","currentChapterIndex","currentChapterStory","prev","moral_alignment","restartGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","entry","index","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/guanhuawu/Documents/ai_choice_game/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// API base URL - change this to your backend server URL\nconst API_BASE_URL = 'http://localhost:5001';\n\nfunction App() {\n    const [story, setStory] = useState(\"\");\n    const [choices, setChoices] = useState([]);\n    const [statusMessage, setStatusMessage] = useState(\"Waiting for the story to load...\"); \n    const [sessionId, setSessionId] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [gameHistory, setGameHistory] = useState([]); // To keep track of story progress\n    const [choicesMade, setChoicesMade] = useState([]); // To track the choices player made\n    const [chapterSummaries, setChapterSummaries] = useState([]); // To store AI-generated summaries\n    const [moralAlignment, setMoralAlignment] = useState(\"neutral\"); // To track moral alignment\n\n    // Helper function to create summary from story\n    const createSummary = (text) => {\n        // If text is short enough, return it as is\n        if (text.length <= 120) return text;\n        \n        // Otherwise, truncate and add ellipsis\n        return text.substring(0, 117) + '...';\n    };\n\n    // Function to get AI-generated summary of a chapter and player's choice\n    const getSummaryForChapter = async (storyText, playerChoice) => {\n        try {\n            const response = await fetch(`${API_BASE_URL}/summarize`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    story: storyText,\n                    choice: playerChoice\n                })\n            });\n            \n            if (!response.ok) {\n                throw new Error('Failed to generate chapter summary');\n            }\n            \n            const data = await response.json();\n            return data.summary;\n        } catch (error) {\n            console.error('Error getting chapter summary:', error);\n            return `You chose \"${playerChoice}\" and continued your journey...`;\n        }\n    };\n\n    // Fetch the initial story when the component mounts\n    useEffect(() => {\n        setLoading(true);\n        console.log(\"Fetching initial story...\");\n        \n        fetch(`${API_BASE_URL}/start`)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                console.log(\"Story received:\", data);\n                \n                if (data.story) {\n                    setStory(data.story);\n                    setChoices(data.choices || []);\n                    setStatusMessage(\"\");\n                    \n                    if (data.session_id) {\n                        setSessionId(data.session_id);\n                    }\n                    \n                    // Add to game history\n                    setGameHistory([{\n                        story: data.story,\n                        choices: data.choices\n                    }]);\n                } else {\n                    setStatusMessage(\"Failed to generate the initial story.\");\n                }\n            })\n            .catch((error) => {\n                console.error(\"Failed to fetch the initial story:\", error);\n                setStatusMessage(`Failed to fetch the initial story: ${error.message}`);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, []);\n\n    // Function to handle player choice and fetch the next story\n    const handleChoice = (choice, choiceText) => {\n        if (!sessionId) {\n            setStatusMessage(\"Session ID is missing. Please restart the game.\");\n            return;\n        }\n\n        setLoading(true);\n        console.log(`Choice made: ${choice}, Session ID: ${sessionId}`);\n        setStatusMessage(\"Generating the next part of the story...\");\n        \n        // Store the previous chapter content for summary generation\n        const currentChapterIndex = gameHistory.length - 1;\n        const currentChapterStory = gameHistory[currentChapterIndex].story;\n        \n        // Add this choice to the choicesMade array\n        setChoicesMade(prev => [...prev, choiceText]);\n        \n        fetch(`${API_BASE_URL}/choice`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                choice, \n                session_id: sessionId \n            })\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(async data => {\n            console.log(\"Next story received:\", data);\n            \n            if (data.story) {\n                // First, generate summary for the PREVIOUS chapter plus the choice made\n                // This happens after we know the choice was successful\n                const summary = await getSummaryForChapter(currentChapterStory, choiceText);\n                setChapterSummaries(prev => [...prev, summary]);\n                \n                // Then update current story and choices for the NEW chapter\n                setStory(data.story);\n                setChoices(data.choices || []);\n                \n                // Update moral alignment if provided\n                if (data.moral_alignment) {\n                    setMoralAlignment(data.moral_alignment);\n                }\n                \n                setStatusMessage(\"\");\n                \n                // Add to game history\n                setGameHistory(prev => [...prev, {\n                    story: data.story,\n                    choices: data.choices\n                }]);\n            } else if (data.error) {\n                setStatusMessage(`Error: ${data.error}`);\n            } else {\n                setStatusMessage(\"Failed to generate the next part of the story.\");\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error processing your choice:\", error);\n            setStatusMessage(`Error processing your choice: ${error.message}`);\n        })\n        .finally(() => {\n            setLoading(false);\n        });\n    };\n\n    // Function to restart the game\n    const restartGame = () => {\n        setStory(\"\");\n        setChoices([]);\n        setSessionId(null);\n        setGameHistory([]);\n        setChoicesMade([]);\n        setChapterSummaries([]);\n        setMoralAlignment(\"neutral\");\n        setStatusMessage(\"Starting a new game...\");\n        \n        // Trigger the initial story fetch again\n        setLoading(true);\n        fetch(`${API_BASE_URL}/start`)\n            .then(response => response.json())\n            .then(data => {\n                if (data.story) {\n                    setStory(data.story);\n                    setChoices(data.choices || []);\n                    setStatusMessage(\"\");\n                    \n                    if (data.session_id) {\n                        setSessionId(data.session_id);\n                    }\n                    \n                    setGameHistory([{\n                        story: data.story,\n                        choices: data.choices\n                    }]);\n                }\n            })\n            .catch(error => {\n                setStatusMessage(`Failed to restart: ${error.message}`);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    };\n\n    return (\n        <div className=\"App\">\n            {/* Story Journey Sidebar */}\n            <div className=\"sidebar\">\n                {/* Add moral alignment indicator */}\n                <div className={`moral-indicator ${moralAlignment}`}>\n                    <h3>Character Path</h3>\n                    <div className=\"moral-meter\">\n                        <div className=\"moral-label good\">Virtuous</div>\n                        <div className=\"moral-bar\">\n                            <div className={`moral-fill ${moralAlignment}`}></div>\n                        </div>\n                        <div className=\"moral-label evil\">Dark</div>\n                    </div>\n                </div>\n\n                <h2>Your Journey</h2>\n                {gameHistory.map((entry, index) => (\n                    <div key={index} className=\"journey-entry\">\n                        <div className=\"chapter\">Chapter {index + 1}</div>\n                        \n                        {/* Show the AI summary for completed chapters (we have a summary) */}\n                        {index < chapterSummaries.length && (\n                            <div className=\"chapter-summary\">{chapterSummaries[index]}</div>\n                        )}\n                        \n                        {/* For chapters without summary (current chapter), show raw content */}\n                        {index >= chapterSummaries.length && (\n                            <>\n                                <div className=\"story-summary\">{createSummary(entry.story)}</div>\n                                {index < choicesMade.length && (\n                                    <div className=\"choice-made\">→ {choicesMade[index]}</div>\n                                )}\n                            </>\n                        )}\n                    </div>\n                ))}\n            </div>\n            \n            {/* Main Game Content */}\n            <div className=\"main-content\">\n                <h1>AI Choice Game</h1>\n\n                {/* Dialogue box for displaying the story */}\n                <div className=\"dialogue-box\">\n                    {loading ? (\n                        <p>Loading your adventure...</p>\n                    ) : story ? (\n                        <p>{story}</p>\n                    ) : (\n                        <p>Waiting for your story to begin...</p>\n                    )}\n                </div>\n\n                {/* Choice buttons - dynamically rendered */}\n                <div className=\"choice-box\">\n                    {!loading && choices.length > 0 ? (\n                        choices.map((choice, index) => (\n                            <button \n                                key={index} \n                                onClick={() => handleChoice(index + 1, choice)}\n                                className=\"choice-button\"\n                                disabled={loading}\n                            >\n                                {choice}\n                            </button>\n                        ))\n                    ) : loading ? (\n                        <p>Loading choices...</p>\n                    ) : (\n                        <button onClick={restartGame} className=\"choice-button\">\n                            Start New Game\n                        </button>\n                    )}\n                </div>\n\n                {/* Status message */}\n                {statusMessage && <div className=\"status-box\">{statusMessage}</div>}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}