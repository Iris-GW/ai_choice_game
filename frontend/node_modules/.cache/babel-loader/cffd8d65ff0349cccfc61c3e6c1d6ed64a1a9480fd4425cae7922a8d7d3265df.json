{"ast":null,"code":"var _jsxFileName = \"/Users/guanhuawu/Documents/ai_choice_game/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// API base URL - change this to your backend server URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5001';\nfunction App() {\n  _s();\n  const [story, setStory] = useState(\"\");\n  const [choices, setChoices] = useState([]);\n  const [statusMessage, setStatusMessage] = useState(\"Waiting for the story to load...\");\n  const [sessionId, setSessionId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]); // To keep track of story progress\n  const [choicesMade, setChoicesMade] = useState([]); // To track the choices player made\n  const [chapterSummaries, setChapterSummaries] = useState([]); // AI-generated summaries\n\n  // Helper function to create summary from story\n  const createSummary = text => {\n    // If text is short enough, return it as is\n    if (text.length <= 120) return text;\n\n    // Otherwise, truncate and add ellipsis\n    return text.substring(0, 117) + '...';\n  };\n\n  // Function to get AI-generated summary for a chapter\n  const getAISummary = async storyText => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/summarize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          story: storyText\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get AI summary');\n      }\n      const data = await response.json();\n      return data.summary || \"Chapter in your journey...\";\n    } catch (error) {\n      console.error(\"Error getting AI summary:\", error);\n      return \"Chapter in your journey...\";\n    }\n  };\n\n  // Fetch the initial story when the component mounts\n  useEffect(() => {\n    setLoading(true);\n    console.log(\"Fetching initial story...\");\n    fetch(`${API_BASE_URL}/start`).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(async data => {\n      console.log(\"Story received:\", data);\n      if (data.story) {\n        setStory(data.story);\n        setChoices(data.choices || []);\n        setStatusMessage(\"\");\n        if (data.session_id) {\n          setSessionId(data.session_id);\n        }\n\n        // Get AI summary for first chapter\n        const summary = await getAISummary(data.story);\n\n        // Add to game history\n        setGameHistory([{\n          story: data.story,\n          choices: data.choices\n        }]);\n\n        // Add to chapter summaries\n        setChapterSummaries([summary]);\n      } else {\n        setStatusMessage(\"Failed to generate the initial story.\");\n      }\n    }).catch(error => {\n      console.error(\"Failed to fetch the initial story:\", error);\n      setStatusMessage(`Failed to fetch the initial story: ${error.message}`);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, []);\n\n  // Function to handle player choice and fetch the next story\n  const handleChoice = (choice, choiceText) => {\n    if (!sessionId) {\n      setStatusMessage(\"Session ID is missing. Please restart the game.\");\n      return;\n    }\n    setLoading(true);\n    console.log(`Choice made: ${choice}, Session ID: ${sessionId}`);\n    setStatusMessage(\"Generating the next part of the story...\");\n\n    // Add this choice to the choicesMade array\n    setChoicesMade(prev => [...prev, choiceText]);\n    fetch(`${API_BASE_URL}/choice`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        choice,\n        session_id: sessionId\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(async data => {\n      console.log(\"Next story received:\", data);\n      if (data.story) {\n        // Update current story and choices\n        setStory(data.story);\n        setChoices(data.choices || []);\n        setStatusMessage(\"\");\n\n        // Get AI summary for this chapter\n        const summary = await getAISummary(data.story);\n\n        // Add to game history\n        setGameHistory(prev => [...prev, {\n          story: data.story,\n          choices: data.choices\n        }]);\n\n        // Add to chapter summaries\n        setChapterSummaries(prev => [...prev, summary]);\n      } else if (data.error) {\n        setStatusMessage(`Error: ${data.error}`);\n      } else {\n        setStatusMessage(\"Failed to generate the next part of the story.\");\n      }\n    }).catch(error => {\n      console.error(\"Error processing your choice:\", error);\n      setStatusMessage(`Error processing your choice: ${error.message}`);\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  // Function to restart the game\n  const restartGame = () => {\n    setStory(\"\");\n    setChoices([]);\n    setSessionId(null);\n    setGameHistory([]);\n    setChoicesMade([]);\n    setChapterSummaries([]);\n    setStatusMessage(\"Starting a new game...\");\n\n    // Trigger the initial story fetch again\n    setLoading(true);\n    fetch(`${API_BASE_URL}/start`).then(response => response.json()).then(async data => {\n      if (data.story) {\n        setStory(data.story);\n        setChoices(data.choices || []);\n        setStatusMessage(\"\");\n        if (data.session_id) {\n          setSessionId(data.session_id);\n        }\n\n        // Get AI summary for first chapter\n        const summary = await getAISummary(data.story);\n        setGameHistory([{\n          story: data.story,\n          choices: data.choices\n        }]);\n        setChapterSummaries([summary]);\n      }\n    }).catch(error => {\n      setStatusMessage(`Failed to restart: ${error.message}`);\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Journey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), gameHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"journey-entry\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chapter\",\n          children: [\"Chapter \", index + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 25\n        }, this), chapterSummaries[index] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chapter-summary\",\n          children: [\"\\\"\", chapterSummaries[index], \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"story-summary\",\n          children: createSummary(entry.story)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 25\n        }, this), index < choicesMade.length && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"choice-made\",\n          children: [\"\\u2192 \", choicesMade[index]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"AI Choice Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dialogue-box\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading your adventure...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 25\n        }, this) : story ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: story\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Waiting for your story to begin...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"choice-box\",\n        children: !loading && choices.length > 0 ? choices.map((choice, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleChoice(index + 1, choice),\n          className: \"choice-button\",\n          disabled: loading,\n          children: choice\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 29\n        }, this)) : loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading choices...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restartGame,\n          className: \"choice-button\",\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-box\",\n        children: statusMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"QGTS5C4uHnUBysEg1mJX7O5OeBk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","story","setStory","choices","setChoices","statusMessage","setStatusMessage","sessionId","setSessionId","loading","setLoading","gameHistory","setGameHistory","choicesMade","setChoicesMade","chapterSummaries","setChapterSummaries","createSummary","text","length","substring","getAISummary","storyText","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","summary","error","console","log","then","status","session_id","catch","message","finally","handleChoice","choice","choiceText","prev","restartGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","entry","index","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/guanhuawu/Documents/ai_choice_game/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// API base URL - change this to your backend server URL\nconst API_BASE_URL = 'http://localhost:5001';\n\nfunction App() {\n    const [story, setStory] = useState(\"\");\n    const [choices, setChoices] = useState([]);\n    const [statusMessage, setStatusMessage] = useState(\"Waiting for the story to load...\"); \n    const [sessionId, setSessionId] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [gameHistory, setGameHistory] = useState([]); // To keep track of story progress\n    const [choicesMade, setChoicesMade] = useState([]); // To track the choices player made\n    const [chapterSummaries, setChapterSummaries] = useState([]); // AI-generated summaries\n\n    // Helper function to create summary from story\n    const createSummary = (text) => {\n        // If text is short enough, return it as is\n        if (text.length <= 120) return text;\n        \n        // Otherwise, truncate and add ellipsis\n        return text.substring(0, 117) + '...';\n    };\n\n    // Function to get AI-generated summary for a chapter\n    const getAISummary = async (storyText) => {\n        try {\n            const response = await fetch(`${API_BASE_URL}/summarize`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ story: storyText })\n            });\n            \n            if (!response.ok) {\n                throw new Error('Failed to get AI summary');\n            }\n            \n            const data = await response.json();\n            return data.summary || \"Chapter in your journey...\";\n        } catch (error) {\n            console.error(\"Error getting AI summary:\", error);\n            return \"Chapter in your journey...\";\n        }\n    };\n\n    // Fetch the initial story when the component mounts\n    useEffect(() => {\n        setLoading(true);\n        console.log(\"Fetching initial story...\");\n        \n        fetch(`${API_BASE_URL}/start`)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(async data => {\n                console.log(\"Story received:\", data);\n                \n                if (data.story) {\n                    setStory(data.story);\n                    setChoices(data.choices || []);\n                    setStatusMessage(\"\");\n                    \n                    if (data.session_id) {\n                        setSessionId(data.session_id);\n                    }\n                    \n                    // Get AI summary for first chapter\n                    const summary = await getAISummary(data.story);\n                    \n                    // Add to game history\n                    setGameHistory([{\n                        story: data.story,\n                        choices: data.choices\n                    }]);\n                    \n                    // Add to chapter summaries\n                    setChapterSummaries([summary]);\n                } else {\n                    setStatusMessage(\"Failed to generate the initial story.\");\n                }\n            })\n            .catch((error) => {\n                console.error(\"Failed to fetch the initial story:\", error);\n                setStatusMessage(`Failed to fetch the initial story: ${error.message}`);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, []);\n\n    // Function to handle player choice and fetch the next story\n    const handleChoice = (choice, choiceText) => {\n        if (!sessionId) {\n            setStatusMessage(\"Session ID is missing. Please restart the game.\");\n            return;\n        }\n\n        setLoading(true);\n        console.log(`Choice made: ${choice}, Session ID: ${sessionId}`);\n        setStatusMessage(\"Generating the next part of the story...\");\n        \n        // Add this choice to the choicesMade array\n        setChoicesMade(prev => [...prev, choiceText]);\n        \n        fetch(`${API_BASE_URL}/choice`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                choice, \n                session_id: sessionId \n            })\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(async data => {\n            console.log(\"Next story received:\", data);\n            \n            if (data.story) {\n                // Update current story and choices\n                setStory(data.story);\n                setChoices(data.choices || []);\n                setStatusMessage(\"\");\n                \n                // Get AI summary for this chapter\n                const summary = await getAISummary(data.story);\n                \n                // Add to game history\n                setGameHistory(prev => [...prev, {\n                    story: data.story,\n                    choices: data.choices\n                }]);\n                \n                // Add to chapter summaries\n                setChapterSummaries(prev => [...prev, summary]);\n            } else if (data.error) {\n                setStatusMessage(`Error: ${data.error}`);\n            } else {\n                setStatusMessage(\"Failed to generate the next part of the story.\");\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error processing your choice:\", error);\n            setStatusMessage(`Error processing your choice: ${error.message}`);\n        })\n        .finally(() => {\n            setLoading(false);\n        });\n    };\n\n    // Function to restart the game\n    const restartGame = () => {\n        setStory(\"\");\n        setChoices([]);\n        setSessionId(null);\n        setGameHistory([]);\n        setChoicesMade([]);\n        setChapterSummaries([]);\n        setStatusMessage(\"Starting a new game...\");\n        \n        // Trigger the initial story fetch again\n        setLoading(true);\n        fetch(`${API_BASE_URL}/start`)\n            .then(response => response.json())\n            .then(async data => {\n                if (data.story) {\n                    setStory(data.story);\n                    setChoices(data.choices || []);\n                    setStatusMessage(\"\");\n                    \n                    if (data.session_id) {\n                        setSessionId(data.session_id);\n                    }\n                    \n                    // Get AI summary for first chapter\n                    const summary = await getAISummary(data.story);\n                    \n                    setGameHistory([{\n                        story: data.story,\n                        choices: data.choices\n                    }]);\n                    \n                    setChapterSummaries([summary]);\n                }\n            })\n            .catch(error => {\n                setStatusMessage(`Failed to restart: ${error.message}`);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    };\n\n    return (\n        <div className=\"App\">\n            {/* Story Journey Sidebar */}\n            <div className=\"sidebar\">\n                <h2>Your Journey</h2>\n                {gameHistory.map((entry, index) => (\n                    <div key={index} className=\"journey-entry\">\n                        <div className=\"chapter\">Chapter {index + 1}</div>\n                        \n                        {/* AI-generated summary */}\n                        {chapterSummaries[index] && (\n                            <div className=\"chapter-summary\">\"{chapterSummaries[index]}\"</div>\n                        )}\n                        \n                        <div className=\"story-summary\">{createSummary(entry.story)}</div>\n                        {index < choicesMade.length && (\n                            <div className=\"choice-made\">→ {choicesMade[index]}</div>\n                        )}\n                    </div>\n                ))}\n            </div>\n            \n            {/* Main Game Content */}\n            <div className=\"main-content\">\n                <h1>AI Choice Game</h1>\n\n                {/* Dialogue box for displaying the story */}\n                <div className=\"dialogue-box\">\n                    {loading ? (\n                        <p>Loading your adventure...</p>\n                    ) : story ? (\n                        <p>{story}</p>\n                    ) : (\n                        <p>Waiting for your story to begin...</p>\n                    )}\n                </div>\n\n                {/* Choice buttons - dynamically rendered */}\n                <div className=\"choice-box\">\n                    {!loading && choices.length > 0 ? (\n                        choices.map((choice, index) => (\n                            <button \n                                key={index} \n                                onClick={() => handleChoice(index + 1, choice)}\n                                className=\"choice-button\"\n                                disabled={loading}\n                            >\n                                {choice}\n                            </button>\n                        ))\n                    ) : loading ? (\n                        <p>Loading choices...</p>\n                    ) : (\n                        <button onClick={restartGame} className=\"choice-button\">\n                            Start New Game\n                        </button>\n                    )}\n                </div>\n\n                {/* Status message */}\n                {statusMessage && <div className=\"status-box\">{statusMessage}</div>}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}