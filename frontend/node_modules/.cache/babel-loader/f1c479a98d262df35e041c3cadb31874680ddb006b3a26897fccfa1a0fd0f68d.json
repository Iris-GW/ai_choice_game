{"ast":null,"code":"var _jsxFileName = \"/Users/guanhuawu/Documents/ai_choice_game/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// API base URL - change this to your backend server URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5001';\nfunction App() {\n  _s();\n  const [story, setStory] = useState(\"\");\n  const [choices, setChoices] = useState([]);\n  const [statusMessage, setStatusMessage] = useState(\"Waiting for the story to load...\");\n  const [sessionId, setSessionId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]); // To keep track of story progress\n\n  // Fetch the initial story when the component mounts\n  useEffect(() => {\n    setLoading(true);\n    console.log(\"Fetching initial story...\");\n    fetch(`${API_BASE_URL}/start`).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Story received:\", data);\n      if (data.story) {\n        setStory(data.story);\n        setChoices(data.choices || []);\n        setStatusMessage(\"\");\n        if (data.session_id) {\n          setSessionId(data.session_id);\n        }\n\n        // Add to game history\n        setGameHistory([{\n          story: data.story,\n          choices: data.choices\n        }]);\n      } else {\n        setStatusMessage(\"Failed to generate the initial story.\");\n      }\n    }).catch(error => {\n      console.error(\"Failed to fetch the initial story:\", error);\n      setStatusMessage(`Failed to fetch the initial story: ${error.message}`);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, []);\n\n  // Function to handle player choice and fetch the next story\n  const handleChoice = choice => {\n    if (!sessionId) {\n      setStatusMessage(\"Session ID is missing. Please restart the game.\");\n      return;\n    }\n    setLoading(true);\n    console.log(`Choice made: ${choice}, Session ID: ${sessionId}`);\n    setStatusMessage(\"Generating the next part of the story...\");\n    fetch(`${API_BASE_URL}/choice`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        choice,\n        session_id: sessionId\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Next story received:\", data);\n      if (data.story) {\n        // Update current story and choices\n        setStory(data.story);\n        setChoices(data.choices || []);\n        setStatusMessage(\"\");\n\n        // Add to game history\n        setGameHistory(prev => [...prev, {\n          story: data.story,\n          choices: data.choices\n        }]);\n      } else if (data.error) {\n        setStatusMessage(`Error: ${data.error}`);\n      } else {\n        setStatusMessage(\"Failed to generate the next part of the story.\");\n      }\n    }).catch(error => {\n      console.error(\"Error processing your choice:\", error);\n      setStatusMessage(`Error processing your choice: ${error.message}`);\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  // Function to restart the game\n  const restartGame = () => {\n    setStory(\"\");\n    setChoices([]);\n    setSessionId(null);\n    setGameHistory([]);\n    setStatusMessage(\"Starting a new game...\");\n\n    // Trigger the initial story fetch again\n    setLoading(true);\n    fetch(`${API_BASE_URL}/start`).then(response => response.json()).then(data => {\n      if (data.story) {\n        setStory(data.story);\n        setChoices(data.choices || []);\n        setStatusMessage(\"\");\n        if (data.session_id) {\n          setSessionId(data.session_id);\n        }\n        setGameHistory([{\n          story: data.story,\n          choices: data.choices\n        }]);\n      }\n    }).catch(error => {\n      setStatusMessage(`Failed to restart: ${error.message}`);\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AI Choice Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"character-name\",\n      children: \"Your Adventure\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dialogue-box\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading your adventure...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this) : story ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: story\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Waiting for your story to begin...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"choice-box\",\n      children: !loading && choices.length > 0 ? choices.map((choice, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleChoice(index + 1),\n        className: \"choice-button\",\n        disabled: loading,\n        children: choice\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }, this)) : loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading choices...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: restartGame,\n        className: \"choice-button\",\n        children: \"Start New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-box\",\n      children: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 31\n    }, this), gameHistory.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Adventure Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-entries\",\n        children: gameHistory.slice(0, -1).map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"history-entry\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\"Chapter \", index + 1, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 36\n            }, this), \" \", entry.story.substring(0, 50), \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"sFkK8LAMKExHJ2rkMqPP90wJTrE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","story","setStory","choices","setChoices","statusMessage","setStatusMessage","sessionId","setSessionId","loading","setLoading","gameHistory","setGameHistory","console","log","fetch","then","response","ok","Error","status","json","data","session_id","catch","error","message","finally","handleChoice","choice","method","headers","body","JSON","stringify","prev","restartGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","onClick","disabled","slice","entry","substring","_c","$RefreshReg$"],"sources":["/Users/guanhuawu/Documents/ai_choice_game/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// API base URL - change this to your backend server URL\nconst API_BASE_URL = 'http://localhost:5001';\n\nfunction App() {\n    const [story, setStory] = useState(\"\");\n    const [choices, setChoices] = useState([]);\n    const [statusMessage, setStatusMessage] = useState(\"Waiting for the story to load...\"); \n    const [sessionId, setSessionId] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [gameHistory, setGameHistory] = useState([]); // To keep track of story progress\n\n    // Fetch the initial story when the component mounts\n    useEffect(() => {\n        setLoading(true);\n        console.log(\"Fetching initial story...\");\n        \n        fetch(`${API_BASE_URL}/start`)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                console.log(\"Story received:\", data);\n                \n                if (data.story) {\n                    setStory(data.story);\n                    setChoices(data.choices || []);\n                    setStatusMessage(\"\");\n                    \n                    if (data.session_id) {\n                        setSessionId(data.session_id);\n                    }\n                    \n                    // Add to game history\n                    setGameHistory([{\n                        story: data.story,\n                        choices: data.choices\n                    }]);\n                } else {\n                    setStatusMessage(\"Failed to generate the initial story.\");\n                }\n            })\n            .catch((error) => {\n                console.error(\"Failed to fetch the initial story:\", error);\n                setStatusMessage(`Failed to fetch the initial story: ${error.message}`);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, []);\n\n    // Function to handle player choice and fetch the next story\n    const handleChoice = (choice) => {\n        if (!sessionId) {\n            setStatusMessage(\"Session ID is missing. Please restart the game.\");\n            return;\n        }\n\n        setLoading(true);\n        console.log(`Choice made: ${choice}, Session ID: ${sessionId}`);\n        setStatusMessage(\"Generating the next part of the story...\");\n        \n        fetch(`${API_BASE_URL}/choice`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                choice, \n                session_id: sessionId \n            })\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => {\n            console.log(\"Next story received:\", data);\n            \n            if (data.story) {\n                // Update current story and choices\n                setStory(data.story);\n                setChoices(data.choices || []);\n                setStatusMessage(\"\");\n                \n                // Add to game history\n                setGameHistory(prev => [...prev, {\n                    story: data.story,\n                    choices: data.choices\n                }]);\n            } else if (data.error) {\n                setStatusMessage(`Error: ${data.error}`);\n            } else {\n                setStatusMessage(\"Failed to generate the next part of the story.\");\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error processing your choice:\", error);\n            setStatusMessage(`Error processing your choice: ${error.message}`);\n        })\n        .finally(() => {\n            setLoading(false);\n        });\n    };\n\n    // Function to restart the game\n    const restartGame = () => {\n        setStory(\"\");\n        setChoices([]);\n        setSessionId(null);\n        setGameHistory([]);\n        setStatusMessage(\"Starting a new game...\");\n        \n        // Trigger the initial story fetch again\n        setLoading(true);\n        fetch(`${API_BASE_URL}/start`)\n            .then(response => response.json())\n            .then(data => {\n                if (data.story) {\n                    setStory(data.story);\n                    setChoices(data.choices || []);\n                    setStatusMessage(\"\");\n                    \n                    if (data.session_id) {\n                        setSessionId(data.session_id);\n                    }\n                    \n                    setGameHistory([{\n                        story: data.story,\n                        choices: data.choices\n                    }]);\n                }\n            })\n            .catch(error => {\n                setStatusMessage(`Failed to restart: ${error.message}`);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>AI Choice Game</h1>\n            <h2 className=\"character-name\">Your Adventure</h2>\n\n            {/* Dialogue box for displaying the story */}\n            <div className=\"dialogue-box\">\n                {loading ? (\n                    <p>Loading your adventure...</p>\n                ) : story ? (\n                    <p>{story}</p>\n                ) : (\n                    <p>Waiting for your story to begin...</p>\n                )}\n            </div>\n\n            {/* Choice buttons - dynamically rendered */}\n            <div className=\"choice-box\">\n                {!loading && choices.length > 0 ? (\n                    choices.map((choice, index) => (\n                        <button \n                            key={index} \n                            onClick={() => handleChoice(index + 1)}\n                            className=\"choice-button\"\n                            disabled={loading}\n                        >\n                            {choice}\n                        </button>\n                    ))\n                ) : loading ? (\n                    <p>Loading choices...</p>\n                ) : (\n                    <button onClick={restartGame} className=\"choice-button\">\n                        Start New Game\n                    </button>\n                )}\n            </div>\n\n            {/* Status message */}\n            {statusMessage && <div className=\"status-box\">{statusMessage}</div>}\n            \n            {/* Game history (optional) */}\n            {gameHistory.length > 1 && (\n                <div className=\"game-history\">\n                    <h3>Adventure Log</h3>\n                    <div className=\"history-entries\">\n                        {gameHistory.slice(0, -1).map((entry, index) => (\n                            <div key={index} className=\"history-entry\">\n                                <p><strong>Chapter {index + 1}:</strong> {entry.story.substring(0, 50)}...</p>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}